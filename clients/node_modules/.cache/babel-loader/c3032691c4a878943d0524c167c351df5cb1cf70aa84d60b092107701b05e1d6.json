{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.discoveryengine_v1alpha = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar discoveryengine_v1alpha;\n(function (discoveryengine_v1alpha) {\n  /**\n   * Discovery Engine API\n   *\n   * Discovery Engine API.\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const discoveryengine = google.discoveryengine('v1alpha');\n   * ```\n   */\n  class Discoveryengine {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.projects = new Resource$Projects(this.context);\n    }\n  }\n  discoveryengine_v1alpha.Discoveryengine = Discoveryengine;\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n      this.locations = new Resource$Projects$Locations(this.context);\n      this.operations = new Resource$Projects$Operations(this.context);\n    }\n  }\n  discoveryengine_v1alpha.Resource$Projects = Resource$Projects;\n  class Resource$Projects$Locations {\n    constructor(context) {\n      this.context = context;\n      this.dataStores = new Resource$Projects$Locations$Datastores(this.context);\n      this.operations = new Resource$Projects$Locations$Operations(this.context);\n    }\n  }\n  discoveryengine_v1alpha.Resource$Projects$Locations = Resource$Projects$Locations;\n  class Resource$Projects$Locations$Datastores {\n    constructor(context) {\n      this.context = context;\n      this.branches = new Resource$Projects$Locations$Datastores$Branches(this.context);\n      this.models = new Resource$Projects$Locations$Datastores$Models(this.context);\n      this.operations = new Resource$Projects$Locations$Datastores$Operations(this.context);\n      this.servingConfigs = new Resource$Projects$Locations$Datastores$Servingconfigs(this.context);\n      this.userEvents = new Resource$Projects$Locations$Datastores$Userevents(this.context);\n    }\n  }\n  discoveryengine_v1alpha.Resource$Projects$Locations$Datastores = Resource$Projects$Locations$Datastores;\n  class Resource$Projects$Locations$Datastores$Branches {\n    constructor(context) {\n      this.context = context;\n      this.documents = new Resource$Projects$Locations$Datastores$Branches$Documents(this.context);\n      this.operations = new Resource$Projects$Locations$Datastores$Branches$Operations(this.context);\n    }\n  }\n  discoveryengine_v1alpha.Resource$Projects$Locations$Datastores$Branches = Resource$Projects$Locations$Datastores$Branches;\n  class Resource$Projects$Locations$Datastores$Branches$Documents {\n    constructor(context) {\n      this.context = context;\n    }\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/{+parent}/documents').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    import(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/{+parent}/documents:import').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/{+parent}/documents').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  discoveryengine_v1alpha.Resource$Projects$Locations$Datastores$Branches$Documents = Resource$Projects$Locations$Datastores$Branches$Documents;\n  class Resource$Projects$Locations$Datastores$Branches$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  discoveryengine_v1alpha.Resource$Projects$Locations$Datastores$Branches$Operations = Resource$Projects$Locations$Datastores$Branches$Operations;\n  class Resource$Projects$Locations$Datastores$Models {\n    constructor(context) {\n      this.context = context;\n      this.operations = new Resource$Projects$Locations$Datastores$Models$Operations(this.context);\n    }\n  }\n  discoveryengine_v1alpha.Resource$Projects$Locations$Datastores$Models = Resource$Projects$Locations$Datastores$Models;\n  class Resource$Projects$Locations$Datastores$Models$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  discoveryengine_v1alpha.Resource$Projects$Locations$Datastores$Models$Operations = Resource$Projects$Locations$Datastores$Models$Operations;\n  class Resource$Projects$Locations$Datastores$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  discoveryengine_v1alpha.Resource$Projects$Locations$Datastores$Operations = Resource$Projects$Locations$Datastores$Operations;\n  class Resource$Projects$Locations$Datastores$Servingconfigs {\n    constructor(context) {\n      this.context = context;\n    }\n    recommend(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/{+servingConfig}:recommend').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['servingConfig'],\n        pathParams: ['servingConfig'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  discoveryengine_v1alpha.Resource$Projects$Locations$Datastores$Servingconfigs = Resource$Projects$Locations$Datastores$Servingconfigs;\n  class Resource$Projects$Locations$Datastores$Userevents {\n    constructor(context) {\n      this.context = context;\n    }\n    collect(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/{+parent}/userEvents:collect').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    import(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/{+parent}/userEvents:import').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    write(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/{+parent}/userEvents:write').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  discoveryengine_v1alpha.Resource$Projects$Locations$Datastores$Userevents = Resource$Projects$Locations$Datastores$Userevents;\n  class Resource$Projects$Locations$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  discoveryengine_v1alpha.Resource$Projects$Locations$Operations = Resource$Projects$Locations$Operations;\n  class Resource$Projects$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n      const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n      if (callback) {\n        (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n      } else {\n        return (0, googleapis_common_1.createAPIRequest)(parameters);\n      }\n    }\n  }\n  discoveryengine_v1alpha.Resource$Projects$Operations = Resource$Projects$Operations;\n})(discoveryengine_v1alpha = exports.discoveryengine_v1alpha || (exports.discoveryengine_v1alpha = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","discoveryengine_v1alpha","googleapis_common_1","require","Discoveryengine","constructor","options","google","context","_options","projects","Resource$Projects","locations","Resource$Projects$Locations","operations","Resource$Projects$Operations","dataStores","Resource$Projects$Locations$Datastores","Resource$Projects$Locations$Operations","branches","Resource$Projects$Locations$Datastores$Branches","models","Resource$Projects$Locations$Datastores$Models","Resource$Projects$Locations$Datastores$Operations","servingConfigs","Resource$Projects$Locations$Datastores$Servingconfigs","userEvents","Resource$Projects$Locations$Datastores$Userevents","documents","Resource$Projects$Locations$Datastores$Branches$Documents","Resource$Projects$Locations$Datastores$Branches$Operations","create","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","delete","get","import","list","patch","Resource$Projects$Locations$Datastores$Models$Operations","recommend","collect","write"],"sources":["C:/Users/edwin/node_modules/googleapis/build/src/apis/discoveryengine/v1alpha.js"],"sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.discoveryengine_v1alpha = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar discoveryengine_v1alpha;\n(function (discoveryengine_v1alpha) {\n    /**\n     * Discovery Engine API\n     *\n     * Discovery Engine API.\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const discoveryengine = google.discoveryengine('v1alpha');\n     * ```\n     */\n    class Discoveryengine {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.projects = new Resource$Projects(this.context);\n        }\n    }\n    discoveryengine_v1alpha.Discoveryengine = Discoveryengine;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.locations = new Resource$Projects$Locations(this.context);\n            this.operations = new Resource$Projects$Operations(this.context);\n        }\n    }\n    discoveryengine_v1alpha.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Locations {\n        constructor(context) {\n            this.context = context;\n            this.dataStores = new Resource$Projects$Locations$Datastores(this.context);\n            this.operations = new Resource$Projects$Locations$Operations(this.context);\n        }\n    }\n    discoveryengine_v1alpha.Resource$Projects$Locations = Resource$Projects$Locations;\n    class Resource$Projects$Locations$Datastores {\n        constructor(context) {\n            this.context = context;\n            this.branches = new Resource$Projects$Locations$Datastores$Branches(this.context);\n            this.models = new Resource$Projects$Locations$Datastores$Models(this.context);\n            this.operations = new Resource$Projects$Locations$Datastores$Operations(this.context);\n            this.servingConfigs =\n                new Resource$Projects$Locations$Datastores$Servingconfigs(this.context);\n            this.userEvents = new Resource$Projects$Locations$Datastores$Userevents(this.context);\n        }\n    }\n    discoveryengine_v1alpha.Resource$Projects$Locations$Datastores = Resource$Projects$Locations$Datastores;\n    class Resource$Projects$Locations$Datastores$Branches {\n        constructor(context) {\n            this.context = context;\n            this.documents =\n                new Resource$Projects$Locations$Datastores$Branches$Documents(this.context);\n            this.operations =\n                new Resource$Projects$Locations$Datastores$Branches$Operations(this.context);\n        }\n    }\n    discoveryengine_v1alpha.Resource$Projects$Locations$Datastores$Branches = Resource$Projects$Locations$Datastores$Branches;\n    class Resource$Projects$Locations$Datastores$Branches$Documents {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/{+parent}/documents').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        import(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/{+parent}/documents:import').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/{+parent}/documents').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    discoveryengine_v1alpha.Resource$Projects$Locations$Datastores$Branches$Documents = Resource$Projects$Locations$Datastores$Branches$Documents;\n    class Resource$Projects$Locations$Datastores$Branches$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    discoveryengine_v1alpha.Resource$Projects$Locations$Datastores$Branches$Operations = Resource$Projects$Locations$Datastores$Branches$Operations;\n    class Resource$Projects$Locations$Datastores$Models {\n        constructor(context) {\n            this.context = context;\n            this.operations =\n                new Resource$Projects$Locations$Datastores$Models$Operations(this.context);\n        }\n    }\n    discoveryengine_v1alpha.Resource$Projects$Locations$Datastores$Models = Resource$Projects$Locations$Datastores$Models;\n    class Resource$Projects$Locations$Datastores$Models$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    discoveryengine_v1alpha.Resource$Projects$Locations$Datastores$Models$Operations = Resource$Projects$Locations$Datastores$Models$Operations;\n    class Resource$Projects$Locations$Datastores$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    discoveryengine_v1alpha.Resource$Projects$Locations$Datastores$Operations = Resource$Projects$Locations$Datastores$Operations;\n    class Resource$Projects$Locations$Datastores$Servingconfigs {\n        constructor(context) {\n            this.context = context;\n        }\n        recommend(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/{+servingConfig}:recommend').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['servingConfig'],\n                pathParams: ['servingConfig'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    discoveryengine_v1alpha.Resource$Projects$Locations$Datastores$Servingconfigs = Resource$Projects$Locations$Datastores$Servingconfigs;\n    class Resource$Projects$Locations$Datastores$Userevents {\n        constructor(context) {\n            this.context = context;\n        }\n        collect(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/{+parent}/userEvents:collect').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        import(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/{+parent}/userEvents:import').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        write(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/{+parent}/userEvents:write').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    discoveryengine_v1alpha.Resource$Projects$Locations$Datastores$Userevents = Resource$Projects$Locations$Datastores$Userevents;\n    class Resource$Projects$Locations$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    discoveryengine_v1alpha.Resource$Projects$Locations$Operations = Resource$Projects$Locations$Operations;\n    class Resource$Projects$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://discoveryengine.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                (0, googleapis_common_1.createAPIRequest)(parameters, callback);\n            }\n            else {\n                return (0, googleapis_common_1.createAPIRequest)(parameters);\n            }\n        }\n    }\n    discoveryengine_v1alpha.Resource$Projects$Operations = Resource$Projects$Operations;\n})(discoveryengine_v1alpha = exports.discoveryengine_v1alpha || (exports.discoveryengine_v1alpha = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}